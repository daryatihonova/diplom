@startuml Добавление комментария
actor Пользователь
participant "Веб-приложение" as Flask
database "База данных" as DB
participant "Почта" as Mail
Пользователь -> Flask: Вводит текст комментария\n нажимает кнопку "Отправить"
alt Если пользователь НЕ авторизован
    Flask -> Пользователь: "Вы должны быть авторизованы\n для добавления комментария"
else Если авторизован
    Flask -> DB: Сохранить комментарий
    DB --> Flask: Сохранено
    Flask -> Mail: Сообщить администратору о\n новом комментарии
    Flask -> Пользователь: "Комментарий сохранён"
end
@enduml


@startuml Регистрация
actor Пользователь
participant "Веб-приложение" as Flask
database "База данных" as DB
participant "Почта" as Mail
Пользователь -> Flask: Заполняет форму регистрации\n(имя, email, пароль)
Flask -> DB: Проверка уникальности email
DB --> Flask: Результат
alt Email занят
    Flask -> Пользователь: "Email уже существует"
else Email свободен
    Flask -> DB: Создать пользователя
    Flask -> Mail: Отправить приветственное письмо
    Flask -> Пользователь: "Регистрация успешна"
end
@enduml

@startuml Избранное
actor Пользователь
participant "Веб-приложение" as Flask
database "База данных" as DB
Пользователь -> Flask: Нажимает кнопку "Добавить в избранное"
alt Не авторизован
    Flask -> Пользователь: "Требуется вход"
else Уже в избранном
    Flask -> Пользователь: "Уже добавлено"
else Успешно
    Flask -> DB: Добавить место в избранное
    Flask -> Пользователь: "Добавлено в избранное"
end
@enduml

@startuml Восстановление_пароля
actor Пользователь
participant "Веб-приложение" as Flask
database "База данных" as DB
participant "Почта" as Mail
Пользователь -> Flask: Вводит email
Flask -> DB: Поиск email пользователя
alt Пользователь существует, email найден
    Flask -> Mail: Отправить ссылку для сброса пароля
    Flask -> Пользователь: "Письмо отправлено"
else Не найден
    Flask -> Пользователь: "Email не найден,\n зарегистрируйтесь"
end
@enduml